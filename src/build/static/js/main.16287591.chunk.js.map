{"version":3,"sources":["components/HomePage.js","components/AboutPage.js","components/article-content.js","components/ArticlesList.js","components/ArticlesListPage.js","components/CommentsList.js","components/NotFoundPage.js","components/UpvoteSection.js","components/AddCommentForm.js","components/ArticlePage.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","AboutPage","articles","name","title","content","ArticlesList","map","article","key","to","substring","ArticlesListPage","articleContent","CommentsList","comments","comment","className","username","text","NotFoundPage","UpvoteSection","articleName","upvotes","setArticleInfo","upvoteArticle","a","fetch","method","result","json","body","onClick","AddCommentForm","useState","setUsername","commentText","setCommentText","addComment","JSON","stringify","headers","id","type","value","onChange","event","target","rows","cols","ArticlePage","match","params","find","articleInfo","useEffect","fetchData","otherArticles","filter","paragraph","NavBar","App","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.16287591.chunk.js","sourcesContent":["import React from 'react'; \r\n\r\nconst HomePage = () => {\r\n    return(\r\n        <>\r\n        <h1>Hello , Welcome to my blog!</h1>\r\n        <p>Hello Friedns How are you welcome to learning Full stack development class</p>\r\n        <p>Welcome to linkedin learning course of full stack react development</p>\r\n        </>\r\n    ); \r\n\r\n}\r\nexport default HomePage; ","import React from 'react'; \r\n\r\nconst AboutPage = () => {\r\n    return(\r\n        <>\r\n        <h1>About Me!!</h1>\r\n        <p>Hello Friedns How are you welcome to learning Full stack development class</p>\r\n        <p>Welcome to linkedin learning course of full stack react development</p>\r\n        </>\r\n    ); \r\n\r\n}\r\nexport default AboutPage; ","const articles = [\r\n    {\r\n        name: 'learn-react',\r\n        title: 'the fastest way to learn react', \r\n        content: [\r\n            'content1', \r\n            'content2', \r\n            'content3'\r\n        ]\r\n    },\r\n    {\r\n        name: 'learn-node',\r\n        title: 'the fastest way to learn selenium', \r\n        content: [\r\n            'content4', \r\n            'content5', \r\n            'content6'\r\n        ]\r\n    },\r\n    {\r\n        name: 'my-thoughts-on-resumes',\r\n        title: 'the fastest way to learn javascript', \r\n        content: [\r\n            'content7', \r\n            'content8', \r\n            'content9'\r\n        ]\r\n    },\r\n];\r\n\r\nexport default articles; ","import React from 'react'; \r\nimport {Link} from 'react-router-dom'; \r\n\r\nconst ArticlesList = ({articles}) => {\r\n    return (\r\n        <>\r\n         {\r\n           articles.map((article,key) => (\r\n            <Link key={key} to={`/article/${article.name}`}>\r\n              <h3>{article.title}</h3>\r\n              <p>{article.content[0].substring(0,150)}...</p>\r\n            </Link>\r\n            ))\r\n         }\r\n\r\n        </>\r\n\r\n    ); \r\n}\r\nexport default ArticlesList;","import React from 'react'; \r\nimport articleContent from './article-content'; \r\nimport ArticlesList from './ArticlesList'; \r\n\r\nconst ArticlesListPage = () => {\r\n    return(\r\n        <>\r\n        <h1>Articles</h1>\r\n        <ArticlesList articles={articleContent}/>\r\n        </>\r\n    ); \r\n\r\n}\r\nexport default ArticlesListPage; ","import React from 'react'; \r\n\r\nconst CommentsList = ({comments}) => {\r\n    return(\r\n        <>\r\n        <h3>Comments:</h3>\r\n        {comments.map((comment, key) => (\r\n            <div className=\"comment\" key={key}>\r\n                <h4>{comment.username}</h4>\r\n                <p>{comment.text}</p>\r\n            </div>\r\n        ))}\r\n        </>\r\n    ); \r\n       \r\n}\r\nexport default CommentsList; \r\n","import React from 'react'; \r\n\r\nconst NotFoundPage = () => {\r\n    return(\r\n    <h1>400:  Page not found\r\n    </h1>\r\n    );\r\n}\r\nexport default NotFoundPage;\r\n","import React from 'react';\r\n\r\nconst UpvoteSection = ({articleName, upvotes , setArticleInfo}) => {\r\n    const upvoteArticle = async () => {\r\n        const result = await fetch(`/api/articles/${articleName}/upvote`,{\r\n            method:'post',\r\n        });\r\n        const body  = await result.json(); \r\n        setArticleInfo(body); \r\n    }\r\n    return(\r\n        <>\r\n        <button onClick={() => upvoteArticle()}>Add Upvote</button>\r\n         <p>This post has been upvoted {upvotes} times</p>\r\n        </>\r\n    ); \r\n};\r\nexport default UpvoteSection;","import React,{useState} from 'react'; \r\n\r\nconst AddCommentForm = ({articleName, setArticleInfo}) => {\r\n    const[username, setUsername] = useState('');\r\n    const[commentText, setCommentText] = useState(''); \r\n\r\n    const addComment = async () => {\r\n        const result = await fetch(`/api/articles/${articleName}/add-comment`,{\r\n        method :'post',\r\n        body : JSON.stringify({username, text: commentText}),\r\n        headers:{\r\n            'Content-Type':'application/json',\r\n        }\r\n        });\r\n        const body = await result.json(); \r\n        setArticleInfo(body); \r\n        setUsername('');\r\n        setCommentText('');\r\n\r\n    }\r\n    return(\r\n        <div id=\"add-comment-form\">\r\n            <h3>Add a Comment</h3>\r\n            <label>\r\n                Name : \r\n                <input type=\"text\" value={username} onChange={(event) => setUsername(event.target.value)} />\r\n            </label>\r\n            <label>\r\n                Comments: \r\n            <textarea rows=\"4\" cols = \"50\" value={commentText} onChange={(event) => setCommentText(event.target.value)}/>\r\n            </label>\r\n            <button onClick={() => addComment()}>Add Comment</button>\r\n        </div>\r\n    ); \r\n}\r\nexport default AddCommentForm ; ","import React, {useState, useEffect} from 'react'; \r\nimport ArticlesList from './ArticlesList'; \r\nimport articleContent from './article-content'; \r\nimport CommentsList from './CommentsList'; \r\nimport NotFoundPage from './NotFoundPage';\r\nimport UpvoteSection from './UpvoteSection'; \r\nimport AddCommentForm from './AddCommentForm';\r\n\r\nconst ArticlePage= ({ match }) => {\r\n\r\n    const name=match.params.name;\r\n    const article = articleContent.find( article => article.name === name); \r\n\r\n    const [articleInfo, setArticleInfo] = useState({upvotes: 0 , comments: []});\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await fetch(`/api/articles/${name}`);\r\n            const body = await result.json();\r\n            setArticleInfo(body);\r\n        }\r\n        fetchData(); \r\n    },[name]);\r\n\r\n    if(!article) return <NotFoundPage />\r\n    const otherArticles = articleContent.filter(article => article.name !== name);\r\n    return(\r\n        <>\r\n        <h1>{article.title}</h1>\r\n        <UpvoteSection articleName={name} upvotes={articleInfo.upvotes} setArticleInfo = {setArticleInfo} />\r\n        {article.content.map((paragraph, key) => (\r\n            <p key={key}>{paragraph}</p>\r\n        ))}\r\n        <CommentsList comments={articleInfo.comments} />\r\n        <AddCommentForm articleName={name} setArticleInfo ={setArticleInfo} />\r\n        <h3>Other Articles</h3>\r\n        <ArticlesList articles={otherArticles} />\r\n        </>\r\n    ); \r\n\r\n}\r\nexport default ArticlePage; ","import React from 'react'; \r\nimport {Link} from 'react-router-dom'; \r\n\r\nconst NavBar = () => {\r\n\r\n    return(\r\n             <nav>\r\n                 <ul>\r\n                     <li>\r\n                         <Link to=\"/\">Home</Link>\r\n                     </li>\r\n                     <li>\r\n                         <Link to=\"/about\">About</Link>\r\n                     </li>\r\n                     <li>\r\n                         <Link to=\"/articles-list\">Articles</Link>\r\n                     </li>\r\n                 </ul>\r\n             </nav>\r\n    ); \r\n}\r\nexport default NavBar; ","import React from 'react';\nimport {\n  BrowserRouter as Router , \n  Route,Switch\n} from 'react-router-dom'; \nimport './App.css';\nimport HomePage from './components/HomePage'; \nimport AboutPage from './components/AboutPage';\nimport ArticlesListPage from './components/ArticlesListPage';\nimport ArticlePage from './components/ArticlePage'; \nimport NotFoundPage from './components/NotFoundPage';\nimport NavBar from './NavBar';\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <NavBar />\n        <div id=\"page-body\">\n           <Switch>\n               <Route path=\"/\" component={HomePage} exact/>\n               <Route path=\"/about\" component={AboutPage} />\n               <Route path=\"/articles-list\" component={ArticlesListPage} />\n               <Route path=\"/article/:name\" component={ArticlePage} />\n               <Route component={NotFoundPage} />\n            </Switch>\n        </div>\n    </div>\n    </Router>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'whatwg-fetch';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}